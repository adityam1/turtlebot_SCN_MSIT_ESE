# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gateway_msgs/ErrorCodes.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ErrorCodes(genpy.Message):
  _md5sum = "cc2f69c68d11f625f99f07d82c572d47"
  _type = "gateway_msgs/ErrorCodes"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Error types for the gateway ros api

# General
int8 SUCCESS = 0
int8 NO_HUB_CONNECTION = 1

# Hub
int8 HUB_CONNECTION_ALREADY_EXISTS = 11
int8 HUB_CONNECTION_UNRESOLVABLE = 12
int8 HUB_CONNECTION_BLACKLISTED = 13
int8 HUB_CONNECTION_FAILED = 14
int8 HUB_CONNECTION_NOT_IN_NONEMPTY_WHITELIST = 15
int8 HUB_NAME_NOT_FOUND = 16
int8 HUB_CONNECTION_LOST = 17
int8 HUB_UNKNOWN_ERROR = 19

# Flipping
int8 FLIP_RULE_ALREADY_EXISTS = 22
int8 FLIP_PATTERN_ALREDY_EXISTS = 23
int8 FLIP_REMOTE_GATEWAY_FIREWALLING = 24

# Advertise
int8 ADVERTISEMENT_EXISTS = 31
int8 ADVERTISEMENT_NOT_FOUND = 32
int8 UNKNOWN_ADVERTISEMENT_ERROR = 39

# Pulling
int8 PULL_RULE_ALREADY_EXISTS = 41

# Remotes
int8 REMOTE_GATEWAY_NOT_VISIBLE = 51
int8 REMOTE_GATEWAY_SELF_IS_NOT = 52
int8 REMOTE_GATEWAY_TARGET_HAS_MULTIPLE_MATCHES = 53"""
  # Pseudo-constants
  SUCCESS = 0
  NO_HUB_CONNECTION = 1
  HUB_CONNECTION_ALREADY_EXISTS = 11
  HUB_CONNECTION_UNRESOLVABLE = 12
  HUB_CONNECTION_BLACKLISTED = 13
  HUB_CONNECTION_FAILED = 14
  HUB_CONNECTION_NOT_IN_NONEMPTY_WHITELIST = 15
  HUB_NAME_NOT_FOUND = 16
  HUB_CONNECTION_LOST = 17
  HUB_UNKNOWN_ERROR = 19
  FLIP_RULE_ALREADY_EXISTS = 22
  FLIP_PATTERN_ALREDY_EXISTS = 23
  FLIP_REMOTE_GATEWAY_FIREWALLING = 24
  ADVERTISEMENT_EXISTS = 31
  ADVERTISEMENT_NOT_FOUND = 32
  UNKNOWN_ADVERTISEMENT_ERROR = 39
  PULL_RULE_ALREADY_EXISTS = 41
  REMOTE_GATEWAY_NOT_VISIBLE = 51
  REMOTE_GATEWAY_SELF_IS_NOT = 52
  REMOTE_GATEWAY_TARGET_HAS_MULTIPLE_MATCHES = 53

  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ErrorCodes, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
