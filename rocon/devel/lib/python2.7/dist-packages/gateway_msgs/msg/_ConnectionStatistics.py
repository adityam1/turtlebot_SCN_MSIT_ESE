# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gateway_msgs/ConnectionStatistics.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ConnectionStatistics(genpy.Message):
  _md5sum = "672067d5ab3e6157dcf8224022da3ee6"
  _type = "gateway_msgs/ConnectionStatistics"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Constants
int8 WIRED = 1
int8 WIRELESS = 2
int32 MAX_TTL = 86400

# Gateway ping indicators
bool gateway_available
int64 time_since_last_seen #time in seconds since last ping successful
float32 ping_latency_min
float32 ping_latency_max
float32 ping_latency_avg
float32 ping_latency_mdev #mean absolute deviation

# Gateway network information indicators
bool network_info_available
int8 network_type
float32 wireless_bitrate
int8 wireless_link_quality
float32 wireless_signal_level
float32 wireless_noise_level


"""
  # Pseudo-constants
  WIRED = 1
  WIRELESS = 2
  MAX_TTL = 86400

  __slots__ = ['gateway_available','time_since_last_seen','ping_latency_min','ping_latency_max','ping_latency_avg','ping_latency_mdev','network_info_available','network_type','wireless_bitrate','wireless_link_quality','wireless_signal_level','wireless_noise_level']
  _slot_types = ['bool','int64','float32','float32','float32','float32','bool','int8','float32','int8','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gateway_available,time_since_last_seen,ping_latency_min,ping_latency_max,ping_latency_avg,ping_latency_mdev,network_info_available,network_type,wireless_bitrate,wireless_link_quality,wireless_signal_level,wireless_noise_level

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ConnectionStatistics, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.gateway_available is None:
        self.gateway_available = False
      if self.time_since_last_seen is None:
        self.time_since_last_seen = 0
      if self.ping_latency_min is None:
        self.ping_latency_min = 0.
      if self.ping_latency_max is None:
        self.ping_latency_max = 0.
      if self.ping_latency_avg is None:
        self.ping_latency_avg = 0.
      if self.ping_latency_mdev is None:
        self.ping_latency_mdev = 0.
      if self.network_info_available is None:
        self.network_info_available = False
      if self.network_type is None:
        self.network_type = 0
      if self.wireless_bitrate is None:
        self.wireless_bitrate = 0.
      if self.wireless_link_quality is None:
        self.wireless_link_quality = 0
      if self.wireless_signal_level is None:
        self.wireless_signal_level = 0.
      if self.wireless_noise_level is None:
        self.wireless_noise_level = 0.
    else:
      self.gateway_available = False
      self.time_since_last_seen = 0
      self.ping_latency_min = 0.
      self.ping_latency_max = 0.
      self.ping_latency_avg = 0.
      self.ping_latency_mdev = 0.
      self.network_info_available = False
      self.network_type = 0
      self.wireless_bitrate = 0.
      self.wireless_link_quality = 0
      self.wireless_signal_level = 0.
      self.wireless_noise_level = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_Bq4fBbfb2f.pack(_x.gateway_available, _x.time_since_last_seen, _x.ping_latency_min, _x.ping_latency_max, _x.ping_latency_avg, _x.ping_latency_mdev, _x.network_info_available, _x.network_type, _x.wireless_bitrate, _x.wireless_link_quality, _x.wireless_signal_level, _x.wireless_noise_level))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.gateway_available, _x.time_since_last_seen, _x.ping_latency_min, _x.ping_latency_max, _x.ping_latency_avg, _x.ping_latency_mdev, _x.network_info_available, _x.network_type, _x.wireless_bitrate, _x.wireless_link_quality, _x.wireless_signal_level, _x.wireless_noise_level,) = _struct_Bq4fBbfb2f.unpack(str[start:end])
      self.gateway_available = bool(self.gateway_available)
      self.network_info_available = bool(self.network_info_available)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_Bq4fBbfb2f.pack(_x.gateway_available, _x.time_since_last_seen, _x.ping_latency_min, _x.ping_latency_max, _x.ping_latency_avg, _x.ping_latency_mdev, _x.network_info_available, _x.network_type, _x.wireless_bitrate, _x.wireless_link_quality, _x.wireless_signal_level, _x.wireless_noise_level))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.gateway_available, _x.time_since_last_seen, _x.ping_latency_min, _x.ping_latency_max, _x.ping_latency_avg, _x.ping_latency_mdev, _x.network_info_available, _x.network_type, _x.wireless_bitrate, _x.wireless_link_quality, _x.wireless_signal_level, _x.wireless_noise_level,) = _struct_Bq4fBbfb2f.unpack(str[start:end])
      self.gateway_available = bool(self.gateway_available)
      self.network_info_available = bool(self.network_info_available)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_Bq4fBbfb2f = struct.Struct("<Bq4fBbfb2f")
