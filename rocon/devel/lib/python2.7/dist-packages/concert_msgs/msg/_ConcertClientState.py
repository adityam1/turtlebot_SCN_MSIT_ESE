# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from concert_msgs/ConcertClientState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ConcertClientState(genpy.Message):
  _md5sum = "216b7a80921438395a695bb265efcaf1"
  _type = "concert_msgs/ConcertClientState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# States of concert clients, these should always be synced with what is provided in ConductorGraph.msg
# (for completeness, but also because I do some funny magic to extra the possible list of states from there). 

# pending introspection, the client's advertised handles have not yet been pulled in so we can't do anything yet
string PENDING   = pending
# the ip is invalid, unreachable or some other problem meaning we have to absolutely ignore it
string BAD       = bad
# happens if it is firewalling, we are remote and it is local only, we aren't in its whitelist, or in its blacklist
string BLOCKING  = blocking
# busy serving another remote controller
string BUSY      = busy
# waiting for a concert to invite it
string UNINVITED = uninvited
# in the middle of joining (or rejecting) an invitation from our concert
string JOINING   = joining
# is available for use inside this concert
string AVAILABLE = available
# has lost connection (wireless)
string MISSING   = missing
# has left the concert
string GONE      = gone
"""
  # Pseudo-constants
  PENDING = 'pending'
  BAD = 'bad'
  BLOCKING = 'blocking'
  BUSY = 'busy'
  UNINVITED = 'uninvited'
  JOINING = 'joining'
  AVAILABLE = 'available'
  MISSING = 'missing'
  GONE = 'gone'

  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ConcertClientState, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
