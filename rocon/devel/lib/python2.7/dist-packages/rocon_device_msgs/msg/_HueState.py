# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rocon_device_msgs/HueState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class HueState(genpy.Message):
  _md5sum = "3fa6578e37628a062177e792a87fa213"
  _type = "rocon_device_msgs/HueState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#pre-define color
string OFF = "OFF"
string WHITE = "WHITE"
string RED = "RED"
string GREEN = "GREEN"
string BLUE = "BLUE"
string YELLOW = "YELLOW"
string ORANGE = "ORANGE"
string MAGENTA = "MAGENTA"
string VIOLET = "VIOLET"

#light on/off status true:on /false:off
bool on 

#color coordination in HSV color space 
#http://en.wikipedia.org/wiki/HSL_and_HSV
uint16 hue #h
uint8 sat #s
uint8 bri #v

#light valid status - valid:on /invalid:off
bool reachable  

#for set color with pre-define color
string color"""
  # Pseudo-constants
  OFF = r'"OFF"'
  WHITE = r'"WHITE"'
  RED = r'"RED"'
  GREEN = r'"GREEN"'
  BLUE = r'"BLUE"'
  YELLOW = r'"YELLOW"'
  ORANGE = r'"ORANGE"'
  MAGENTA = r'"MAGENTA"'
  VIOLET = r'"VIOLET"'

  __slots__ = ['on','hue','sat','bri','reachable','color']
  _slot_types = ['bool','uint16','uint8','uint8','bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       on,hue,sat,bri,reachable,color

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HueState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.on is None:
        self.on = False
      if self.hue is None:
        self.hue = 0
      if self.sat is None:
        self.sat = 0
      if self.bri is None:
        self.bri = 0
      if self.reachable is None:
        self.reachable = False
      if self.color is None:
        self.color = ''
    else:
      self.on = False
      self.hue = 0
      self.sat = 0
      self.bri = 0
      self.reachable = False
      self.color = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_BH3B.pack(_x.on, _x.hue, _x.sat, _x.bri, _x.reachable))
      _x = self.color
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.on, _x.hue, _x.sat, _x.bri, _x.reachable,) = _struct_BH3B.unpack(str[start:end])
      self.on = bool(self.on)
      self.reachable = bool(self.reachable)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.color = str[start:end].decode('utf-8')
      else:
        self.color = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_BH3B.pack(_x.on, _x.hue, _x.sat, _x.bri, _x.reachable))
      _x = self.color
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.on, _x.hue, _x.sat, _x.bri, _x.reachable,) = _struct_BH3B.unpack(str[start:end])
      self.on = bool(self.on)
      self.reachable = bool(self.reachable)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.color = str[start:end].decode('utf-8')
      else:
        self.color = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_BH3B = struct.Struct("<BH3B")
