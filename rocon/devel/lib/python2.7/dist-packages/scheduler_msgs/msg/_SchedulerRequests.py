# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from scheduler_msgs/SchedulerRequests.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import uuid_msgs.msg
import rocon_std_msgs.msg
import genpy
import scheduler_msgs.msg
import std_msgs.msg

class SchedulerRequests(genpy.Message):
  _md5sum = "d0adc2f83296939c4b208a3e0619e86f"
  _type = "scheduler_msgs/SchedulerRequests"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """### Scheduler Requests
#
#   Rocon services send this message on the scheduler's input topic to
#   make or update their resource requests.  All resources they
#   currently have or desire should be included.
#
#   If not all of the requested resources are immediately available,
#   the scheduler will queue those requests and provide feedback using
#   a message of the same type.  The requester should wait until
#   feedback indicates the associated resources are available.  It may
#   cancel some requests at any time via an new allocation message.
#
Header header                   # Time of this status, frame_id irrelevant
uuid_msgs/UniqueID requester    # Requester identifier
Request[] requests              # Status of every currently-known request

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: uuid_msgs/UniqueID
# A universally unique identifier (UUID).
#
#  http://en.wikipedia.org/wiki/Universally_unique_identifier
#  http://tools.ietf.org/html/rfc4122.html

uint8[16] uuid

================================================================================
MSG: scheduler_msgs/Request
### Resource request description
#
#   This tracks the progress of a single requested resource group.
#   All these resources will be granted, preempted or canceled
#   together as a unit.

##############################################################################
# Resource Identification
##############################################################################

uuid_msgs/UniqueID id   # Requester-assigned universally unique identifier
Resource[] resources    # List of requested rapps and platforms

##############################################################################
# State
##############################################################################

uint8 status            # Current status of this request
uint8 reason            # Reason for this status
string problem          # Convenience message for introspecting on the reason 

#  Status value labels:
uint8 NEW         = 0   # New request for the scheduler
uint8 RESERVED    = 1   # Request for a reservation at some future time
uint8 WAITING     = 2   # Request has been queued by the scheduler
uint8 GRANTED     = 3   # Request was granted by the scheduler
uint8 PREEMPTING  = 4   # The scheduler wants to preempt this
                        #   previously-granted request, but the
                        #   requester has not yet canceled it
uint8 CANCELING   = 5   # The requester wishes to cancel this
                        #   request, but the scheduler has not yet
                        #   confirmed that it is closed
uint8 CLOSED      = 6   # Request is now closed (terminal state)

# Reason labels:
uint8 NONE        = 0   # No reason provided
uint8 PREEMPTED   = 1   # Preempted for higher-priority task
uint8 BUSY        = 2   # Requested resource busy elsewhere
uint8 UNAVAILABLE = 3   # Requested resource not available
uint8 TIMEOUT     = 4   # Lost contact with requester
uint8 INVALID     = 5   # Ill-formed request: see problem string for details

##############################################################################
# Scheduling Variables
##############################################################################

time     availability   # Estimated time of availability (zero if unknown)
duration hold_time      # Estimated hold time once allocated (zero if unknown)
int16    priority       # Current priority of this request

# Priority labels:
int16 BACKGROUND_PRIORITY = -20000      # When nothing else to do
int16 LOW_PRIORITY = -10000             # Low-priority task
int16 DEFAULT_PRIORITY = 0              # Sane default priority
int16 HIGH_PRIORITY = 10000             # High-priority task
int16 CRITICAL_PRIORITY = 20000         # Mission-critical task

================================================================================
MSG: scheduler_msgs/Resource
### ROCON resource request or response.
#
#   A scheduler_msgs/Request message includes one Resource message for
#   each desired resource.  The scheduler responds using this same
#   message to identify exactly what corresponding resource it has
#   granted.

# This is usually a uniquely identifying ros_package/rapp name
# identifier, which is unique because ros packages are unique.
string rapp

# Unique identifier assigned by the requester to track resources
# assigned in the scheduler feedback.
uuid_msgs/UniqueID id

# Uniform Resource Identifier for the platform.  ROCON defines two
# kinds of URI strings:
#
# 1) A "resource description URI" is a canonical string for a specific
#    device.  All components are fully resolved to their most specific
#    values, like:
#
#      "rocon:/turtlebot/dude3/hydro/precise"
#
#    The scheduler provides fully resolved resource description URIs
#    in its feedback for requests that have been granted.
#
# 2) A "request URI" may provide a similar descriptive representation,
#    or may include patterns for matching multiple alternative
#    platforms.  Omitted or '*' patterns match any valid value:
#
#      ""                               # (empty string): any platform
#      "rocon:/turtlebot"               # any turtlebot
#      "rocon:/(turtlebot|segbot)"      # any robot of either type
#      "rocon:/*/dude3"                 # any device named dude3
#      "rocon:/*/*/ros/ubuntu"          # any ROS Ubuntu platform
#
string uri

# Remappings which get passed on for starting the rapps. Also potentially for
# more esoteric use cases such as checking whether an app is sharable.
rocon_std_msgs/Remapping[] remappings
rocon_std_msgs/KeyValue[] parameters

================================================================================
MSG: rocon_std_msgs/Remapping
# Describes your typical ros remapping

string remap_from
string remap_to

================================================================================
MSG: rocon_std_msgs/KeyValue
string key
string value"""
  __slots__ = ['header','requester','requests']
  _slot_types = ['std_msgs/Header','uuid_msgs/UniqueID','scheduler_msgs/Request[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,requester,requests

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SchedulerRequests, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.requester is None:
        self.requester = uuid_msgs.msg.UniqueID()
      if self.requests is None:
        self.requests = []
    else:
      self.header = std_msgs.msg.Header()
      self.requester = uuid_msgs.msg.UniqueID()
      self.requests = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.requester.uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_16B.pack(*_x))
      else:
        buff.write(_struct_16s.pack(_x))
      length = len(self.requests)
      buff.write(_struct_I.pack(length))
      for val1 in self.requests:
        _v1 = val1.id
        _x = _v1.uuid
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(_struct_16B.pack(*_x))
        else:
          buff.write(_struct_16s.pack(_x))
        length = len(val1.resources)
        buff.write(_struct_I.pack(length))
        for val2 in val1.resources:
          _x = val2.rapp
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v2 = val2.id
          _x = _v2.uuid
          # - if encoded as a list instead, serialize as bytes instead of string
          if type(_x) in [list, tuple]:
            buff.write(_struct_16B.pack(*_x))
          else:
            buff.write(_struct_16s.pack(_x))
          _x = val2.uri
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val2.remappings)
          buff.write(_struct_I.pack(length))
          for val3 in val2.remappings:
            _x = val3.remap_from
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            if python3:
              buff.write(struct.pack('<I%sB'%length, length, *_x))
            else:
              buff.write(struct.pack('<I%ss'%length, length, _x))
            _x = val3.remap_to
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            if python3:
              buff.write(struct.pack('<I%sB'%length, length, *_x))
            else:
              buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val2.parameters)
          buff.write(_struct_I.pack(length))
          for val3 in val2.parameters:
            _x = val3.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            if python3:
              buff.write(struct.pack('<I%sB'%length, length, *_x))
            else:
              buff.write(struct.pack('<I%ss'%length, length, _x))
            _x = val3.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            if python3:
              buff.write(struct.pack('<I%sB'%length, length, *_x))
            else:
              buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2B.pack(_x.status, _x.reason))
        _x = val1.problem
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v3 = val1.availability
        _x = _v3
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _v4 = val1.hold_time
        _x = _v4
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        buff.write(_struct_h.pack(val1.priority))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.requester is None:
        self.requester = uuid_msgs.msg.UniqueID()
      if self.requests is None:
        self.requests = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 16
      self.requester.uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.requests = []
      for i in range(0, length):
        val1 = scheduler_msgs.msg.Request()
        _v5 = val1.id
        start = end
        end += 16
        _v5.uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.resources = []
        for i in range(0, length):
          val2 = scheduler_msgs.msg.Resource()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.rapp = str[start:end].decode('utf-8')
          else:
            val2.rapp = str[start:end]
          _v6 = val2.id
          start = end
          end += 16
          _v6.uuid = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.uri = str[start:end].decode('utf-8')
          else:
            val2.uri = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.remappings = []
          for i in range(0, length):
            val3 = rocon_std_msgs.msg.Remapping()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.remap_from = str[start:end].decode('utf-8')
            else:
              val3.remap_from = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.remap_to = str[start:end].decode('utf-8')
            else:
              val3.remap_to = str[start:end]
            val2.remappings.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.parameters = []
          for i in range(0, length):
            val3 = rocon_std_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.key = str[start:end].decode('utf-8')
            else:
              val3.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.value = str[start:end].decode('utf-8')
            else:
              val3.value = str[start:end]
            val2.parameters.append(val3)
          val1.resources.append(val2)
        _x = val1
        start = end
        end += 2
        (_x.status, _x.reason,) = _struct_2B.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.problem = str[start:end].decode('utf-8')
        else:
          val1.problem = str[start:end]
        _v7 = val1.availability
        _x = _v7
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        _v8 = val1.hold_time
        _x = _v8
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        start = end
        end += 2
        (val1.priority,) = _struct_h.unpack(str[start:end])
        self.requests.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.requester.uuid
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_16B.pack(*_x))
      else:
        buff.write(_struct_16s.pack(_x))
      length = len(self.requests)
      buff.write(_struct_I.pack(length))
      for val1 in self.requests:
        _v9 = val1.id
        _x = _v9.uuid
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(_struct_16B.pack(*_x))
        else:
          buff.write(_struct_16s.pack(_x))
        length = len(val1.resources)
        buff.write(_struct_I.pack(length))
        for val2 in val1.resources:
          _x = val2.rapp
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v10 = val2.id
          _x = _v10.uuid
          # - if encoded as a list instead, serialize as bytes instead of string
          if type(_x) in [list, tuple]:
            buff.write(_struct_16B.pack(*_x))
          else:
            buff.write(_struct_16s.pack(_x))
          _x = val2.uri
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val2.remappings)
          buff.write(_struct_I.pack(length))
          for val3 in val2.remappings:
            _x = val3.remap_from
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            if python3:
              buff.write(struct.pack('<I%sB'%length, length, *_x))
            else:
              buff.write(struct.pack('<I%ss'%length, length, _x))
            _x = val3.remap_to
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            if python3:
              buff.write(struct.pack('<I%sB'%length, length, *_x))
            else:
              buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val2.parameters)
          buff.write(_struct_I.pack(length))
          for val3 in val2.parameters:
            _x = val3.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            if python3:
              buff.write(struct.pack('<I%sB'%length, length, *_x))
            else:
              buff.write(struct.pack('<I%ss'%length, length, _x))
            _x = val3.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            if python3:
              buff.write(struct.pack('<I%sB'%length, length, *_x))
            else:
              buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2B.pack(_x.status, _x.reason))
        _x = val1.problem
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v11 = val1.availability
        _x = _v11
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _v12 = val1.hold_time
        _x = _v12
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        buff.write(_struct_h.pack(val1.priority))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.requester is None:
        self.requester = uuid_msgs.msg.UniqueID()
      if self.requests is None:
        self.requests = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 16
      self.requester.uuid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.requests = []
      for i in range(0, length):
        val1 = scheduler_msgs.msg.Request()
        _v13 = val1.id
        start = end
        end += 16
        _v13.uuid = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.resources = []
        for i in range(0, length):
          val2 = scheduler_msgs.msg.Resource()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.rapp = str[start:end].decode('utf-8')
          else:
            val2.rapp = str[start:end]
          _v14 = val2.id
          start = end
          end += 16
          _v14.uuid = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.uri = str[start:end].decode('utf-8')
          else:
            val2.uri = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.remappings = []
          for i in range(0, length):
            val3 = rocon_std_msgs.msg.Remapping()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.remap_from = str[start:end].decode('utf-8')
            else:
              val3.remap_from = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.remap_to = str[start:end].decode('utf-8')
            else:
              val3.remap_to = str[start:end]
            val2.remappings.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.parameters = []
          for i in range(0, length):
            val3 = rocon_std_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.key = str[start:end].decode('utf-8')
            else:
              val3.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.value = str[start:end].decode('utf-8')
            else:
              val3.value = str[start:end]
            val2.parameters.append(val3)
          val1.resources.append(val2)
        _x = val1
        start = end
        end += 2
        (_x.status, _x.reason,) = _struct_2B.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.problem = str[start:end].decode('utf-8')
        else:
          val1.problem = str[start:end]
        _v15 = val1.availability
        _x = _v15
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        _v16 = val1.hold_time
        _x = _v16
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        start = end
        end += 2
        (val1.priority,) = _struct_h.unpack(str[start:end])
        self.requests.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_h = struct.Struct("<h")
_struct_16B = struct.Struct("<16B")
_struct_2I = struct.Struct("<2I")
_struct_3I = struct.Struct("<3I")
_struct_2B = struct.Struct("<2B")
_struct_2i = struct.Struct("<2i")
_struct_16s = struct.Struct("<16s")
