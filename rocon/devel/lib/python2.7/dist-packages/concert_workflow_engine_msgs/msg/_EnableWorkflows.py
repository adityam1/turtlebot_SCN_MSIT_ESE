# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from concert_workflow_engine_msgs/EnableWorkflows.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import concert_workflow_engine_msgs.msg

class EnableWorkflows(genpy.Message):
  _md5sum = "cacdbbe404b169f5b2bf8c4c9a373315"
  _type = "concert_workflow_engine_msgs/EnableWorkflows"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string service_name
bool enable
Workflow[] workflows
================================================================================
MSG: concert_workflow_engine_msgs/Workflow
string data"""
  __slots__ = ['service_name','enable','workflows']
  _slot_types = ['string','bool','concert_workflow_engine_msgs/Workflow[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       service_name,enable,workflows

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EnableWorkflows, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.service_name is None:
        self.service_name = ''
      if self.enable is None:
        self.enable = False
      if self.workflows is None:
        self.workflows = []
    else:
      self.service_name = ''
      self.enable = False
      self.workflows = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.service_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.enable))
      length = len(self.workflows)
      buff.write(_struct_I.pack(length))
      for val1 in self.workflows:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.workflows is None:
        self.workflows = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.service_name = str[start:end].decode('utf-8')
      else:
        self.service_name = str[start:end]
      start = end
      end += 1
      (self.enable,) = _struct_B.unpack(str[start:end])
      self.enable = bool(self.enable)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.workflows = []
      for i in range(0, length):
        val1 = concert_workflow_engine_msgs.msg.Workflow()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8')
        else:
          val1.data = str[start:end]
        self.workflows.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.service_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.enable))
      length = len(self.workflows)
      buff.write(_struct_I.pack(length))
      for val1 in self.workflows:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.workflows is None:
        self.workflows = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.service_name = str[start:end].decode('utf-8')
      else:
        self.service_name = str[start:end]
      start = end
      end += 1
      (self.enable,) = _struct_B.unpack(str[start:end])
      self.enable = bool(self.enable)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.workflows = []
      for i in range(0, length):
        val1 = concert_workflow_engine_msgs.msg.Workflow()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8')
        else:
          val1.data = str[start:end]
        self.workflows.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
