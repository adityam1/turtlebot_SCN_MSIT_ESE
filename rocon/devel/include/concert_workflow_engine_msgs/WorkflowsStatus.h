// Generated by gencpp from file concert_workflow_engine_msgs/WorkflowsStatus.msg
// DO NOT EDIT!


#ifndef CONCERT_WORKFLOW_ENGINE_MSGS_MESSAGE_WORKFLOWSSTATUS_H
#define CONCERT_WORKFLOW_ENGINE_MSGS_MESSAGE_WORKFLOWSSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace concert_workflow_engine_msgs
{
template <class ContainerAllocator>
struct WorkflowsStatus_
{
  typedef WorkflowsStatus_<ContainerAllocator> Type;

  WorkflowsStatus_()
    : service_name()
    , status(0)
    , message()  {
    }
  WorkflowsStatus_(const ContainerAllocator& _alloc)
    : service_name(_alloc)
    , status(0)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _service_name_type;
  _service_name_type service_name;

   typedef int8_t _status_type;
  _status_type status;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  _message_type message;


    enum { READY = 1 };
     enum { START = 2 };
     enum { RUNNING = 3 };
     enum { STOP = 4 };
     enum { ERROR = -1 };
 

  typedef boost::shared_ptr< ::concert_workflow_engine_msgs::WorkflowsStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::concert_workflow_engine_msgs::WorkflowsStatus_<ContainerAllocator> const> ConstPtr;

}; // struct WorkflowsStatus_

typedef ::concert_workflow_engine_msgs::WorkflowsStatus_<std::allocator<void> > WorkflowsStatus;

typedef boost::shared_ptr< ::concert_workflow_engine_msgs::WorkflowsStatus > WorkflowsStatusPtr;
typedef boost::shared_ptr< ::concert_workflow_engine_msgs::WorkflowsStatus const> WorkflowsStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::concert_workflow_engine_msgs::WorkflowsStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::concert_workflow_engine_msgs::WorkflowsStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace concert_workflow_engine_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'concert_workflow_engine_msgs': ['/home/turtlebot/ese_team_project/rocon/src/rocon_msgs/concert_workflow_engine_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::concert_workflow_engine_msgs::WorkflowsStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::concert_workflow_engine_msgs::WorkflowsStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::concert_workflow_engine_msgs::WorkflowsStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::concert_workflow_engine_msgs::WorkflowsStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::concert_workflow_engine_msgs::WorkflowsStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::concert_workflow_engine_msgs::WorkflowsStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::concert_workflow_engine_msgs::WorkflowsStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "24fa7d7ee2f6b7cfe974804fbd2e1ae0";
  }

  static const char* value(const ::concert_workflow_engine_msgs::WorkflowsStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x24fa7d7ee2f6b7cfULL;
  static const uint64_t static_value2 = 0xe974804fbd2e1ae0ULL;
};

template<class ContainerAllocator>
struct DataType< ::concert_workflow_engine_msgs::WorkflowsStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "concert_workflow_engine_msgs/WorkflowsStatus";
  }

  static const char* value(const ::concert_workflow_engine_msgs::WorkflowsStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::concert_workflow_engine_msgs::WorkflowsStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#pre-define workflow status\n\
int8 READY = 1\n\
int8 START = 2\n\
int8 RUNNING = 3\n\
int8 STOP = 4\n\
int8 ERROR = -1\n\
\n\
string service_name # service name to launch workflow\n\
int8 status # status of workflow\n\
string message # user friendly message\n\
";
  }

  static const char* value(const ::concert_workflow_engine_msgs::WorkflowsStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::concert_workflow_engine_msgs::WorkflowsStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.service_name);
      stream.next(m.status);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WorkflowsStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::concert_workflow_engine_msgs::WorkflowsStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::concert_workflow_engine_msgs::WorkflowsStatus_<ContainerAllocator>& v)
  {
    s << indent << "service_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.service_name);
    s << indent << "status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.status);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONCERT_WORKFLOW_ENGINE_MSGS_MESSAGE_WORKFLOWSSTATUS_H
