// Generated by gencpp from file concert_msgs/ConcertClientState.msg
// DO NOT EDIT!


#ifndef CONCERT_MSGS_MESSAGE_CONCERTCLIENTSTATE_H
#define CONCERT_MSGS_MESSAGE_CONCERTCLIENTSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace concert_msgs
{
template <class ContainerAllocator>
struct ConcertClientState_
{
  typedef ConcertClientState_<ContainerAllocator> Type;

  ConcertClientState_()
    {
    }
  ConcertClientState_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }




    static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PENDING;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  BAD;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  BLOCKING;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  BUSY;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  UNINVITED;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  JOINING;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  AVAILABLE;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  MISSING;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  GONE;
 

  typedef boost::shared_ptr< ::concert_msgs::ConcertClientState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::concert_msgs::ConcertClientState_<ContainerAllocator> const> ConstPtr;

}; // struct ConcertClientState_

typedef ::concert_msgs::ConcertClientState_<std::allocator<void> > ConcertClientState;

typedef boost::shared_ptr< ::concert_msgs::ConcertClientState > ConcertClientStatePtr;
typedef boost::shared_ptr< ::concert_msgs::ConcertClientState const> ConcertClientStateConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ConcertClientState_<ContainerAllocator>::PENDING =
        
          "pending"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ConcertClientState_<ContainerAllocator>::BAD =
        
          "bad"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ConcertClientState_<ContainerAllocator>::BLOCKING =
        
          "blocking"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ConcertClientState_<ContainerAllocator>::BUSY =
        
          "busy"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ConcertClientState_<ContainerAllocator>::UNINVITED =
        
          "uninvited"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ConcertClientState_<ContainerAllocator>::JOINING =
        
          "joining"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ConcertClientState_<ContainerAllocator>::AVAILABLE =
        
          "available"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ConcertClientState_<ContainerAllocator>::MISSING =
        
          "missing"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ConcertClientState_<ContainerAllocator>::GONE =
        
          "gone"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::concert_msgs::ConcertClientState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::concert_msgs::ConcertClientState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace concert_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'rocon_service_pair_msgs': ['/home/turtlebot/ese_team_project/rocon/src/rocon_msgs/rocon_service_pair_msgs/msg'], 'gateway_msgs': ['/home/turtlebot/ese_team_project/rocon/src/rocon_msgs/gateway_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'rocon_app_manager_msgs': ['/home/turtlebot/ese_team_project/rocon/src/rocon_msgs/rocon_app_manager_msgs/msg'], 'concert_msgs': ['/home/turtlebot/ese_team_project/rocon/src/rocon_msgs/concert_msgs/msg'], 'uuid_msgs': ['/opt/ros/indigo/share/uuid_msgs/cmake/../msg'], 'rocon_std_msgs': ['/home/turtlebot/ese_team_project/rocon/src/rocon_msgs/rocon_std_msgs/msg', '/home/turtlebot/ese_team_project/rocon/devel/share/rocon_std_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::concert_msgs::ConcertClientState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::concert_msgs::ConcertClientState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::concert_msgs::ConcertClientState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::concert_msgs::ConcertClientState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::concert_msgs::ConcertClientState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::concert_msgs::ConcertClientState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::concert_msgs::ConcertClientState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "216b7a80921438395a695bb265efcaf1";
  }

  static const char* value(const ::concert_msgs::ConcertClientState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x216b7a8092143839ULL;
  static const uint64_t static_value2 = 0x5a695bb265efcaf1ULL;
};

template<class ContainerAllocator>
struct DataType< ::concert_msgs::ConcertClientState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "concert_msgs/ConcertClientState";
  }

  static const char* value(const ::concert_msgs::ConcertClientState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::concert_msgs::ConcertClientState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# States of concert clients, these should always be synced with what is provided in ConductorGraph.msg\n\
# (for completeness, but also because I do some funny magic to extra the possible list of states from there). \n\
\n\
# pending introspection, the client's advertised handles have not yet been pulled in so we can't do anything yet\n\
string PENDING   = pending\n\
# the ip is invalid, unreachable or some other problem meaning we have to absolutely ignore it\n\
string BAD       = bad\n\
# happens if it is firewalling, we are remote and it is local only, we aren't in its whitelist, or in its blacklist\n\
string BLOCKING  = blocking\n\
# busy serving another remote controller\n\
string BUSY      = busy\n\
# waiting for a concert to invite it\n\
string UNINVITED = uninvited\n\
# in the middle of joining (or rejecting) an invitation from our concert\n\
string JOINING   = joining\n\
# is available for use inside this concert\n\
string AVAILABLE = available\n\
# has lost connection (wireless)\n\
string MISSING   = missing\n\
# has left the concert\n\
string GONE      = gone\n\
";
  }

  static const char* value(const ::concert_msgs::ConcertClientState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::concert_msgs::ConcertClientState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConcertClientState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::concert_msgs::ConcertClientState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::concert_msgs::ConcertClientState_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // CONCERT_MSGS_MESSAGE_CONCERTCLIENTSTATE_H
