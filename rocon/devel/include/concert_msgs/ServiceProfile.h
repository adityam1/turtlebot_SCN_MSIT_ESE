// Generated by gencpp from file concert_msgs/ServiceProfile.msg
// DO NOT EDIT!


#ifndef CONCERT_MSGS_MESSAGE_SERVICEPROFILE_H
#define CONCERT_MSGS_MESSAGE_SERVICEPROFILE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rocon_std_msgs/Icon.h>
#include <rocon_std_msgs/KeyValue.h>
#include <uuid_msgs/UniqueID.h>

namespace concert_msgs
{
template <class ContainerAllocator>
struct ServiceProfile_
{
  typedef ServiceProfile_<ContainerAllocator> Type;

  ServiceProfile_()
    : resource_name()
    , name()
    , description()
    , author()
    , priority(0)
    , icon()
    , launcher_type()
    , launcher()
    , interactions()
    , parameters()
    , parameters_detail()
    , uuid()
    , status(0)
    , enabled(false)  {
    }
  ServiceProfile_(const ContainerAllocator& _alloc)
    : resource_name(_alloc)
    , name(_alloc)
    , description(_alloc)
    , author(_alloc)
    , priority(0)
    , icon(_alloc)
    , launcher_type(_alloc)
    , launcher(_alloc)
    , interactions(_alloc)
    , parameters(_alloc)
    , parameters_detail(_alloc)
    , uuid(_alloc)
    , status(0)
    , enabled(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _resource_name_type;
  _resource_name_type resource_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _description_type;
  _description_type description;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _author_type;
  _author_type author;

   typedef uint16_t _priority_type;
  _priority_type priority;

   typedef  ::rocon_std_msgs::Icon_<ContainerAllocator>  _icon_type;
  _icon_type icon;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _launcher_type_type;
  _launcher_type_type launcher_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _launcher_type;
  _launcher_type launcher;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _interactions_type;
  _interactions_type interactions;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _parameters_type;
  _parameters_type parameters;

   typedef std::vector< ::rocon_std_msgs::KeyValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rocon_std_msgs::KeyValue_<ContainerAllocator> >::other >  _parameters_detail_type;
  _parameters_detail_type parameters_detail;

   typedef  ::uuid_msgs::UniqueID_<ContainerAllocator>  _uuid_type;
  _uuid_type uuid;

   typedef int16_t _status_type;
  _status_type status;

   typedef uint8_t _enabled_type;
  _enabled_type enabled;


    static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TYPE_ROSLAUNCH;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TYPE_CUSTOM;
     static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TYPE_SHADOW;
 

  typedef boost::shared_ptr< ::concert_msgs::ServiceProfile_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::concert_msgs::ServiceProfile_<ContainerAllocator> const> ConstPtr;

}; // struct ServiceProfile_

typedef ::concert_msgs::ServiceProfile_<std::allocator<void> > ServiceProfile;

typedef boost::shared_ptr< ::concert_msgs::ServiceProfile > ServiceProfilePtr;
typedef boost::shared_ptr< ::concert_msgs::ServiceProfile const> ServiceProfileConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ServiceProfile_<ContainerAllocator>::TYPE_ROSLAUNCH =
        
          "roslaunch"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ServiceProfile_<ContainerAllocator>::TYPE_CUSTOM =
        
          "custom"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ServiceProfile_<ContainerAllocator>::TYPE_SHADOW =
        
          "shadow"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::concert_msgs::ServiceProfile_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::concert_msgs::ServiceProfile_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace concert_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'rocon_service_pair_msgs': ['/home/turtlebot/ese_team_project/rocon/src/rocon_msgs/rocon_service_pair_msgs/msg'], 'gateway_msgs': ['/home/turtlebot/ese_team_project/rocon/src/rocon_msgs/gateway_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'rocon_app_manager_msgs': ['/home/turtlebot/ese_team_project/rocon/src/rocon_msgs/rocon_app_manager_msgs/msg'], 'concert_msgs': ['/home/turtlebot/ese_team_project/rocon/src/rocon_msgs/concert_msgs/msg'], 'uuid_msgs': ['/opt/ros/indigo/share/uuid_msgs/cmake/../msg'], 'rocon_std_msgs': ['/home/turtlebot/ese_team_project/rocon/src/rocon_msgs/rocon_std_msgs/msg', '/home/turtlebot/ese_team_project/rocon/devel/share/rocon_std_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::concert_msgs::ServiceProfile_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::concert_msgs::ServiceProfile_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::concert_msgs::ServiceProfile_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::concert_msgs::ServiceProfile_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::concert_msgs::ServiceProfile_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::concert_msgs::ServiceProfile_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::concert_msgs::ServiceProfile_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dcb6ede1f2f06a387af71a83b4776139";
  }

  static const char* value(const ::concert_msgs::ServiceProfile_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdcb6ede1f2f06a38ULL;
  static const uint64_t static_value2 = 0x7af71a83b4776139ULL;
};

template<class ContainerAllocator>
struct DataType< ::concert_msgs::ServiceProfile_<ContainerAllocator> >
{
  static const char* value()
  {
    return "concert_msgs/ServiceProfile";
  }

  static const char* value(const ::concert_msgs::ServiceProfile_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::concert_msgs::ServiceProfile_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Constants - service types\n\
string TYPE_ROSLAUNCH = roslaunch\n\
string TYPE_CUSTOM    = custom\n\
string TYPE_SHADOW    = shadow\n\
\n\
# Pre-configured parameters\n\
string                      resource_name\n\
string                      name\n\
string                      description\n\
string                      author\n\
uint16                      priority\n\
rocon_std_msgs/Icon         icon\n\
string                      launcher_type\n\
string                      launcher\n\
string                      interactions\n\
string                      parameters\n\
rocon_std_msgs/KeyValue[]   parameters_detail\n\
\n\
# Initialised parameters (on startup)\n\
uuid_msgs/UniqueID          uuid\n\
\n\
# Runtime variables\n\
int16                       status\n\
bool                        enabled\n\
\n\
================================================================================\n\
MSG: rocon_std_msgs/Icon\n\
# Used to idenfity the original package/filename resource this icon was/is to be loaded from\n\
# This typically doesn't have to be set, but can be very useful when loading icons from yaml definitions.\n\
string resource_name\n\
\n\
# Image data format.  \"jpeg\" or \"png\"\n\
string format\n\
\n\
# Image data.\n\
uint8[] data\n\
================================================================================\n\
MSG: rocon_std_msgs/KeyValue\n\
string key\n\
string value\n\
================================================================================\n\
MSG: uuid_msgs/UniqueID\n\
# A universally unique identifier (UUID).\n\
#\n\
#  http://en.wikipedia.org/wiki/Universally_unique_identifier\n\
#  http://tools.ietf.org/html/rfc4122.html\n\
\n\
uint8[16] uuid\n\
";
  }

  static const char* value(const ::concert_msgs::ServiceProfile_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::concert_msgs::ServiceProfile_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.resource_name);
      stream.next(m.name);
      stream.next(m.description);
      stream.next(m.author);
      stream.next(m.priority);
      stream.next(m.icon);
      stream.next(m.launcher_type);
      stream.next(m.launcher);
      stream.next(m.interactions);
      stream.next(m.parameters);
      stream.next(m.parameters_detail);
      stream.next(m.uuid);
      stream.next(m.status);
      stream.next(m.enabled);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ServiceProfile_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::concert_msgs::ServiceProfile_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::concert_msgs::ServiceProfile_<ContainerAllocator>& v)
  {
    s << indent << "resource_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.resource_name);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.description);
    s << indent << "author: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.author);
    s << indent << "priority: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.priority);
    s << indent << "icon: ";
    s << std::endl;
    Printer< ::rocon_std_msgs::Icon_<ContainerAllocator> >::stream(s, indent + "  ", v.icon);
    s << indent << "launcher_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.launcher_type);
    s << indent << "launcher: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.launcher);
    s << indent << "interactions: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.interactions);
    s << indent << "parameters: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.parameters);
    s << indent << "parameters_detail[]" << std::endl;
    for (size_t i = 0; i < v.parameters_detail.size(); ++i)
    {
      s << indent << "  parameters_detail[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rocon_std_msgs::KeyValue_<ContainerAllocator> >::stream(s, indent + "    ", v.parameters_detail[i]);
    }
    s << indent << "uuid: ";
    s << std::endl;
    Printer< ::uuid_msgs::UniqueID_<ContainerAllocator> >::stream(s, indent + "  ", v.uuid);
    s << indent << "status: ";
    Printer<int16_t>::stream(s, indent + "  ", v.status);
    s << indent << "enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enabled);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONCERT_MSGS_MESSAGE_SERVICEPROFILE_H
