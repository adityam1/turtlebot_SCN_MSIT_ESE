// Generated by gencpp from file concert_msgs/ConcertClient.msg
// DO NOT EDIT!


#ifndef CONCERT_MSGS_MESSAGE_CONCERTCLIENT_H
#define CONCERT_MSGS_MESSAGE_CONCERTCLIENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rocon_std_msgs/PlatformInfo.h>
#include <gateway_msgs/ConnectionStatistics.h>
#include <rocon_app_manager_msgs/Rapp.h>

namespace concert_msgs
{
template <class ContainerAllocator>
struct ConcertClient_
{
  typedef ConcertClient_<ContainerAllocator> Type;

  ConcertClient_()
    : name()
    , gateway_name()
    , platform_info()
    , is_local_client(false)
    , state()
    , ip()
    , conn_stats()
    , rapps()  {
    }
  ConcertClient_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , gateway_name(_alloc)
    , platform_info(_alloc)
    , is_local_client(false)
    , state(_alloc)
    , ip(_alloc)
    , conn_stats(_alloc)
    , rapps(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gateway_name_type;
  _gateway_name_type gateway_name;

   typedef  ::rocon_std_msgs::PlatformInfo_<ContainerAllocator>  _platform_info_type;
  _platform_info_type platform_info;

   typedef uint8_t _is_local_client_type;
  _is_local_client_type is_local_client;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_type;
  _state_type state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ip_type;
  _ip_type ip;

   typedef  ::gateway_msgs::ConnectionStatistics_<ContainerAllocator>  _conn_stats_type;
  _conn_stats_type conn_stats;

   typedef std::vector< ::rocon_app_manager_msgs::Rapp_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rocon_app_manager_msgs::Rapp_<ContainerAllocator> >::other >  _rapps_type;
  _rapps_type rapps;




  typedef boost::shared_ptr< ::concert_msgs::ConcertClient_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::concert_msgs::ConcertClient_<ContainerAllocator> const> ConstPtr;

}; // struct ConcertClient_

typedef ::concert_msgs::ConcertClient_<std::allocator<void> > ConcertClient;

typedef boost::shared_ptr< ::concert_msgs::ConcertClient > ConcertClientPtr;
typedef boost::shared_ptr< ::concert_msgs::ConcertClient const> ConcertClientConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::concert_msgs::ConcertClient_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::concert_msgs::ConcertClient_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace concert_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'rocon_service_pair_msgs': ['/home/turtlebot/ese_team_project/rocon/src/rocon_msgs/rocon_service_pair_msgs/msg'], 'gateway_msgs': ['/home/turtlebot/ese_team_project/rocon/src/rocon_msgs/gateway_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'rocon_app_manager_msgs': ['/home/turtlebot/ese_team_project/rocon/src/rocon_msgs/rocon_app_manager_msgs/msg'], 'concert_msgs': ['/home/turtlebot/ese_team_project/rocon/src/rocon_msgs/concert_msgs/msg'], 'uuid_msgs': ['/opt/ros/indigo/share/uuid_msgs/cmake/../msg'], 'rocon_std_msgs': ['/home/turtlebot/ese_team_project/rocon/src/rocon_msgs/rocon_std_msgs/msg', '/home/turtlebot/ese_team_project/rocon/devel/share/rocon_std_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::concert_msgs::ConcertClient_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::concert_msgs::ConcertClient_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::concert_msgs::ConcertClient_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::concert_msgs::ConcertClient_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::concert_msgs::ConcertClient_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::concert_msgs::ConcertClient_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::concert_msgs::ConcertClient_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7b021e6713839995a4c68ebde750ba79";
  }

  static const char* value(const ::concert_msgs::ConcertClient_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7b021e6713839995ULL;
  static const uint64_t static_value2 = 0xa4c68ebde750ba79ULL;
};

template<class ContainerAllocator>
struct DataType< ::concert_msgs::ConcertClient_<ContainerAllocator> >
{
  static const char* value()
  {
    return "concert_msgs/ConcertClient";
  }

  static const char* value(const ::concert_msgs::ConcertClient_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::concert_msgs::ConcertClient_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
# The concert alias\n\
string name\n\
\n\
# The unfriendly gateway name with the uuid suffix.\n\
string gateway_name\n\
\n\
# Platform information about the concert client.\n\
rocon_std_msgs/PlatformInfo platform_info\n\
\n\
# Is on the same machine ip as the conductor\n\
bool is_local_client\n\
\n\
# State of the concert client, see ConcertClientState.msg for string constants\n\
# PENDING, BUSY, BLOCKING, BAD, JOINING, UNINVITED, AVAILABLE, MISSING, GONE \n\
string state\n\
\n\
# Statistics\n\
string ip\n\
gateway_msgs/ConnectionStatistics conn_stats\n\
# time last_connection_timestamp\n\
\n\
rocon_app_manager_msgs/Rapp[] rapps\n\
\n\
================================================================================\n\
MSG: rocon_std_msgs/PlatformInfo\n\
# Provides platform details for robots, software or human\n\
# interactive devices.\n\
\n\
########################### Variables ###########################\n\
\n\
# rocon universal resource identifier\n\
string uri\n\
# rocon version compatibility identifier (used when connecting to concerts)\n\
string version\n\
Icon icon\n\
\n\
================================================================================\n\
MSG: rocon_std_msgs/Icon\n\
# Used to idenfity the original package/filename resource this icon was/is to be loaded from\n\
# This typically doesn't have to be set, but can be very useful when loading icons from yaml definitions.\n\
string resource_name\n\
\n\
# Image data format.  \"jpeg\" or \"png\"\n\
string format\n\
\n\
# Image data.\n\
uint8[] data\n\
================================================================================\n\
MSG: gateway_msgs/ConnectionStatistics\n\
# Constants\n\
int8 WIRED = 1\n\
int8 WIRELESS = 2\n\
int32 MAX_TTL = 86400\n\
\n\
# Gateway ping indicators\n\
bool gateway_available\n\
int64 time_since_last_seen #time in seconds since last ping successful\n\
float32 ping_latency_min\n\
float32 ping_latency_max\n\
float32 ping_latency_avg\n\
float32 ping_latency_mdev #mean absolute deviation\n\
\n\
# Gateway network information indicators\n\
bool network_info_available\n\
int8 network_type\n\
float32 wireless_bitrate\n\
int8 wireless_link_quality\n\
float32 wireless_signal_level\n\
float32 wireless_noise_level\n\
\n\
\n\
\n\
================================================================================\n\
MSG: rocon_app_manager_msgs/Rapp\n\
# This is the message that gets published in list_rapps. Do not think of it as the\n\
# 'rapp' definition (since that is quite varied -> ancestor, virtual, child, implementation)\n\
# Rather it is the published list of rapps with the required information for the concert\n\
# and some introspection.\n\
\n\
# app name (ros resource name format, i.e. pkg/name, e.g. turtle_concert/teleop)\n\
string name\n\
# user-friendly display name\n\
string display_name\n\
string description\n\
# a rocon uri string indicating platform compatibility\n\
string compatibility\n\
string status\n\
\n\
# a list of implementations\n\
string[] implementations\n\
\n\
# A preferred rapp for virtual rapp\n\
string preferred\n\
\n\
# icon for showing the app\n\
rocon_std_msgs/Icon icon\n\
\n\
# public interface and parameters\n\
rocon_std_msgs/KeyValue[] public_interface\n\
rocon_std_msgs/KeyValue[] public_parameters\n\
\n\
================================================================================\n\
MSG: rocon_std_msgs/KeyValue\n\
string key\n\
string value\n\
";
  }

  static const char* value(const ::concert_msgs::ConcertClient_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::concert_msgs::ConcertClient_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.gateway_name);
      stream.next(m.platform_info);
      stream.next(m.is_local_client);
      stream.next(m.state);
      stream.next(m.ip);
      stream.next(m.conn_stats);
      stream.next(m.rapps);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConcertClient_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::concert_msgs::ConcertClient_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::concert_msgs::ConcertClient_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "gateway_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gateway_name);
    s << indent << "platform_info: ";
    s << std::endl;
    Printer< ::rocon_std_msgs::PlatformInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.platform_info);
    s << indent << "is_local_client: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_local_client);
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state);
    s << indent << "ip: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ip);
    s << indent << "conn_stats: ";
    s << std::endl;
    Printer< ::gateway_msgs::ConnectionStatistics_<ContainerAllocator> >::stream(s, indent + "  ", v.conn_stats);
    s << indent << "rapps[]" << std::endl;
    for (size_t i = 0; i < v.rapps.size(); ++i)
    {
      s << indent << "  rapps[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rocon_app_manager_msgs::Rapp_<ContainerAllocator> >::stream(s, indent + "    ", v.rapps[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONCERT_MSGS_MESSAGE_CONCERTCLIENT_H
