// Generated by gencpp from file concert_msgs/LinkGraph.msg
// DO NOT EDIT!


#ifndef CONCERT_MSGS_MESSAGE_LINKGRAPH_H
#define CONCERT_MSGS_MESSAGE_LINKGRAPH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <concert_msgs/LinkNode.h>
#include <concert_msgs/LinkConnection.h>
#include <concert_msgs/LinkConnection.h>
#include <concert_msgs/LinkConnection.h>
#include <concert_msgs/LinkEdge.h>

namespace concert_msgs
{
template <class ContainerAllocator>
struct LinkGraph_
{
  typedef LinkGraph_<ContainerAllocator> Type;

  LinkGraph_()
    : nodes()
    , topics()
    , actions()
    , services()
    , edges()  {
    }
  LinkGraph_(const ContainerAllocator& _alloc)
    : nodes(_alloc)
    , topics(_alloc)
    , actions(_alloc)
    , services(_alloc)
    , edges(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::concert_msgs::LinkNode_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::concert_msgs::LinkNode_<ContainerAllocator> >::other >  _nodes_type;
  _nodes_type nodes;

   typedef std::vector< ::concert_msgs::LinkConnection_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::concert_msgs::LinkConnection_<ContainerAllocator> >::other >  _topics_type;
  _topics_type topics;

   typedef std::vector< ::concert_msgs::LinkConnection_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::concert_msgs::LinkConnection_<ContainerAllocator> >::other >  _actions_type;
  _actions_type actions;

   typedef std::vector< ::concert_msgs::LinkConnection_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::concert_msgs::LinkConnection_<ContainerAllocator> >::other >  _services_type;
  _services_type services;

   typedef std::vector< ::concert_msgs::LinkEdge_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::concert_msgs::LinkEdge_<ContainerAllocator> >::other >  _edges_type;
  _edges_type edges;




  typedef boost::shared_ptr< ::concert_msgs::LinkGraph_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::concert_msgs::LinkGraph_<ContainerAllocator> const> ConstPtr;

}; // struct LinkGraph_

typedef ::concert_msgs::LinkGraph_<std::allocator<void> > LinkGraph;

typedef boost::shared_ptr< ::concert_msgs::LinkGraph > LinkGraphPtr;
typedef boost::shared_ptr< ::concert_msgs::LinkGraph const> LinkGraphConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::concert_msgs::LinkGraph_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::concert_msgs::LinkGraph_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace concert_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'rocon_service_pair_msgs': ['/home/turtlebot/ese_team_project/rocon/src/rocon_msgs/rocon_service_pair_msgs/msg'], 'gateway_msgs': ['/home/turtlebot/ese_team_project/rocon/src/rocon_msgs/gateway_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'rocon_app_manager_msgs': ['/home/turtlebot/ese_team_project/rocon/src/rocon_msgs/rocon_app_manager_msgs/msg'], 'concert_msgs': ['/home/turtlebot/ese_team_project/rocon/src/rocon_msgs/concert_msgs/msg'], 'uuid_msgs': ['/opt/ros/indigo/share/uuid_msgs/cmake/../msg'], 'rocon_std_msgs': ['/home/turtlebot/ese_team_project/rocon/src/rocon_msgs/rocon_std_msgs/msg', '/home/turtlebot/ese_team_project/rocon/devel/share/rocon_std_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::concert_msgs::LinkGraph_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::concert_msgs::LinkGraph_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::concert_msgs::LinkGraph_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::concert_msgs::LinkGraph_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::concert_msgs::LinkGraph_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::concert_msgs::LinkGraph_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::concert_msgs::LinkGraph_<ContainerAllocator> >
{
  static const char* value()
  {
    return "227c6e11d605d4647851f3e358cf10ba";
  }

  static const char* value(const ::concert_msgs::LinkGraph_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x227c6e11d605d464ULL;
  static const uint64_t static_value2 = 0x7851f3e358cf10baULL;
};

template<class ContainerAllocator>
struct DataType< ::concert_msgs::LinkGraph_<ContainerAllocator> >
{
  static const char* value()
  {
    return "concert_msgs/LinkGraph";
  }

  static const char* value(const ::concert_msgs::LinkGraph_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::concert_msgs::LinkGraph_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A list of 'named' nodes, e.g. linux.*.ros.robosem.rocon_teleop\n\
\n\
LinkNode[]        nodes\n\
LinkConnection[]  topics\n\
LinkConnection[]  actions\n\
LinkConnection[]  services\n\
LinkEdge[]        edges\n\
\n\
================================================================================\n\
MSG: concert_msgs/LinkNode\n\
# Representation of a concert client node in the implementation graph\n\
\n\
# unique identifier\n\
string id\n\
\n\
# rocon uri representing the required resource, e.g. rocon:/turtlebot/*#turtle_concert/turtle_stroll\n\
string resource\n\
\n\
# Constraints on how many of these nodes may exist\n\
#   min, max not set -> min = 1, max = 1\n\
#   min not set -> min = 1\n\
#   max not set -> max = UNLIMITED_RESOURCE\n\
# Zero is a valid minimum value\n\
int8 UNLIMITED_RESOURCE=-1\n\
int8 min\n\
int8 max\n\
\n\
# Force matching of robot name (only really useful for demos)\n\
bool force_name_matching\n\
\n\
# public parameters for node\n\
rocon_std_msgs/KeyValue parameters\n\
\n\
================================================================================\n\
MSG: rocon_std_msgs/KeyValue\n\
string key\n\
string value\n\
================================================================================\n\
MSG: concert_msgs/LinkConnection\n\
# Representation of a topic/action node in the \n\
# implementation graph\n\
\n\
# unique identifier\n\
string id\n\
# type of the topic, e.g. std_msgs/String\n\
string type\n\
\n\
================================================================================\n\
MSG: concert_msgs/LinkEdge\n\
# Edge of the implementation graph. Client-Topic, or \n\
# Topic-Client or Client-Action or Action-Client\n\
\n\
string start\n\
string finish\n\
string remap_from\n\
string remap_to\n\
";
  }

  static const char* value(const ::concert_msgs::LinkGraph_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::concert_msgs::LinkGraph_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.nodes);
      stream.next(m.topics);
      stream.next(m.actions);
      stream.next(m.services);
      stream.next(m.edges);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LinkGraph_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::concert_msgs::LinkGraph_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::concert_msgs::LinkGraph_<ContainerAllocator>& v)
  {
    s << indent << "nodes[]" << std::endl;
    for (size_t i = 0; i < v.nodes.size(); ++i)
    {
      s << indent << "  nodes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::concert_msgs::LinkNode_<ContainerAllocator> >::stream(s, indent + "    ", v.nodes[i]);
    }
    s << indent << "topics[]" << std::endl;
    for (size_t i = 0; i < v.topics.size(); ++i)
    {
      s << indent << "  topics[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::concert_msgs::LinkConnection_<ContainerAllocator> >::stream(s, indent + "    ", v.topics[i]);
    }
    s << indent << "actions[]" << std::endl;
    for (size_t i = 0; i < v.actions.size(); ++i)
    {
      s << indent << "  actions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::concert_msgs::LinkConnection_<ContainerAllocator> >::stream(s, indent + "    ", v.actions[i]);
    }
    s << indent << "services[]" << std::endl;
    for (size_t i = 0; i < v.services.size(); ++i)
    {
      s << indent << "  services[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::concert_msgs::LinkConnection_<ContainerAllocator> >::stream(s, indent + "    ", v.services[i]);
    }
    s << indent << "edges[]" << std::endl;
    for (size_t i = 0; i < v.edges.size(); ++i)
    {
      s << indent << "  edges[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::concert_msgs::LinkEdge_<ContainerAllocator> >::stream(s, indent + "    ", v.edges[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONCERT_MSGS_MESSAGE_LINKGRAPH_H
