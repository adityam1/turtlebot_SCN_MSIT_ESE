// Generated by gencpp from file world_canvas_msgs/PubAnnotationsDataRequest.msg
// DO NOT EDIT!


#ifndef WORLD_CANVAS_MSGS_MESSAGE_PUBANNOTATIONSDATAREQUEST_H
#define WORLD_CANVAS_MSGS_MESSAGE_PUBANNOTATIONSDATAREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <uuid_msgs/UniqueID.h>

namespace world_canvas_msgs
{
template <class ContainerAllocator>
struct PubAnnotationsDataRequest_
{
  typedef PubAnnotationsDataRequest_<ContainerAllocator> Type;

  PubAnnotationsDataRequest_()
    : annotation_ids()
    , topic_name()
    , topic_type()
    , pub_as_list(false)  {
    }
  PubAnnotationsDataRequest_(const ContainerAllocator& _alloc)
    : annotation_ids(_alloc)
    , topic_name(_alloc)
    , topic_type(_alloc)
    , pub_as_list(false)  {
  (void)_alloc;
    }



   typedef std::vector< ::uuid_msgs::UniqueID_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::uuid_msgs::UniqueID_<ContainerAllocator> >::other >  _annotation_ids_type;
  _annotation_ids_type annotation_ids;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _topic_name_type;
  _topic_name_type topic_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _topic_type_type;
  _topic_type_type topic_type;

   typedef uint8_t _pub_as_list_type;
  _pub_as_list_type pub_as_list;




  typedef boost::shared_ptr< ::world_canvas_msgs::PubAnnotationsDataRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::world_canvas_msgs::PubAnnotationsDataRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PubAnnotationsDataRequest_

typedef ::world_canvas_msgs::PubAnnotationsDataRequest_<std::allocator<void> > PubAnnotationsDataRequest;

typedef boost::shared_ptr< ::world_canvas_msgs::PubAnnotationsDataRequest > PubAnnotationsDataRequestPtr;
typedef boost::shared_ptr< ::world_canvas_msgs::PubAnnotationsDataRequest const> PubAnnotationsDataRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::world_canvas_msgs::PubAnnotationsDataRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::world_canvas_msgs::PubAnnotationsDataRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace world_canvas_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'world_canvas_msgs': ['/home/turtlebot/ese_team_project/rocon/src/world_canvas_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'uuid_msgs': ['/opt/ros/indigo/share/uuid_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::world_canvas_msgs::PubAnnotationsDataRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::world_canvas_msgs::PubAnnotationsDataRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::world_canvas_msgs::PubAnnotationsDataRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::world_canvas_msgs::PubAnnotationsDataRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::world_canvas_msgs::PubAnnotationsDataRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::world_canvas_msgs::PubAnnotationsDataRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::world_canvas_msgs::PubAnnotationsDataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1f37618ab20aa1492050e9599baf8ad0";
  }

  static const char* value(const ::world_canvas_msgs::PubAnnotationsDataRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1f37618ab20aa149ULL;
  static const uint64_t static_value2 = 0x2050e9599baf8ad0ULL;
};

template<class ContainerAllocator>
struct DataType< ::world_canvas_msgs::PubAnnotationsDataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "world_canvas_msgs/PubAnnotationsDataRequest";
  }

  static const char* value(const ::world_canvas_msgs::PubAnnotationsDataRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::world_canvas_msgs::PubAnnotationsDataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
\n\
\n\
\n\
\n\
\n\
\n\
uuid_msgs/UniqueID[] annotation_ids\n\
string topic_name\n\
string topic_type\n\
bool pub_as_list\n\
\n\
\n\
================================================================================\n\
MSG: uuid_msgs/UniqueID\n\
# A universally unique identifier (UUID).\n\
#\n\
#  http://en.wikipedia.org/wiki/Universally_unique_identifier\n\
#  http://tools.ietf.org/html/rfc4122.html\n\
\n\
uint8[16] uuid\n\
";
  }

  static const char* value(const ::world_canvas_msgs::PubAnnotationsDataRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::world_canvas_msgs::PubAnnotationsDataRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.annotation_ids);
      stream.next(m.topic_name);
      stream.next(m.topic_type);
      stream.next(m.pub_as_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PubAnnotationsDataRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::world_canvas_msgs::PubAnnotationsDataRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::world_canvas_msgs::PubAnnotationsDataRequest_<ContainerAllocator>& v)
  {
    s << indent << "annotation_ids[]" << std::endl;
    for (size_t i = 0; i < v.annotation_ids.size(); ++i)
    {
      s << indent << "  annotation_ids[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::uuid_msgs::UniqueID_<ContainerAllocator> >::stream(s, indent + "    ", v.annotation_ids[i]);
    }
    s << indent << "topic_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.topic_name);
    s << indent << "topic_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.topic_type);
    s << indent << "pub_as_list: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pub_as_list);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WORLD_CANVAS_MSGS_MESSAGE_PUBANNOTATIONSDATAREQUEST_H
