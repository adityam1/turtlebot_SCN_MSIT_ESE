// Generated by gencpp from file rocon_device_msgs/GetDeviceListResponse.msg
// DO NOT EDIT!


#ifndef ROCON_DEVICE_MSGS_MESSAGE_GETDEVICELISTRESPONSE_H
#define ROCON_DEVICE_MSGS_MESSAGE_GETDEVICELISTRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rocon_device_msgs/Device.h>

namespace rocon_device_msgs
{
template <class ContainerAllocator>
struct GetDeviceListResponse_
{
  typedef GetDeviceListResponse_<ContainerAllocator> Type;

  GetDeviceListResponse_()
    : devices()  {
    }
  GetDeviceListResponse_(const ContainerAllocator& _alloc)
    : devices(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::rocon_device_msgs::Device_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rocon_device_msgs::Device_<ContainerAllocator> >::other >  _devices_type;
  _devices_type devices;




  typedef boost::shared_ptr< ::rocon_device_msgs::GetDeviceListResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rocon_device_msgs::GetDeviceListResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetDeviceListResponse_

typedef ::rocon_device_msgs::GetDeviceListResponse_<std::allocator<void> > GetDeviceListResponse;

typedef boost::shared_ptr< ::rocon_device_msgs::GetDeviceListResponse > GetDeviceListResponsePtr;
typedef boost::shared_ptr< ::rocon_device_msgs::GetDeviceListResponse const> GetDeviceListResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rocon_device_msgs::GetDeviceListResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rocon_device_msgs::GetDeviceListResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rocon_device_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'rocon_std_msgs': ['/home/turtlebot/ese_team_project/rocon/src/rocon_msgs/rocon_std_msgs/msg', '/home/turtlebot/ese_team_project/rocon/devel/share/rocon_std_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'rocon_device_msgs': ['/home/turtlebot/ese_team_project/rocon/src/rocon_msgs/rocon_device_msgs/msg'], 'rocon_service_pair_msgs': ['/home/turtlebot/ese_team_project/rocon/src/rocon_msgs/rocon_service_pair_msgs/msg'], 'uuid_msgs': ['/opt/ros/indigo/share/uuid_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rocon_device_msgs::GetDeviceListResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rocon_device_msgs::GetDeviceListResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rocon_device_msgs::GetDeviceListResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rocon_device_msgs::GetDeviceListResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rocon_device_msgs::GetDeviceListResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rocon_device_msgs::GetDeviceListResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rocon_device_msgs::GetDeviceListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "47ac4241194bb5519686779949c9843b";
  }

  static const char* value(const ::rocon_device_msgs::GetDeviceListResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x47ac4241194bb551ULL;
  static const uint64_t static_value2 = 0x9686779949c9843bULL;
};

template<class ContainerAllocator>
struct DataType< ::rocon_device_msgs::GetDeviceListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rocon_device_msgs/GetDeviceListResponse";
  }

  static const char* value(const ::rocon_device_msgs::GetDeviceListResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rocon_device_msgs::GetDeviceListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Device[] devices\n\
\n\
\n\
================================================================================\n\
MSG: rocon_device_msgs/Device\n\
string label\n\
string type\n\
string uuid\n\
rocon_std_msgs/KeyValue[] data\n\
\n\
================================================================================\n\
MSG: rocon_std_msgs/KeyValue\n\
string key\n\
string value\n\
";
  }

  static const char* value(const ::rocon_device_msgs::GetDeviceListResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rocon_device_msgs::GetDeviceListResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.devices);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetDeviceListResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rocon_device_msgs::GetDeviceListResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rocon_device_msgs::GetDeviceListResponse_<ContainerAllocator>& v)
  {
    s << indent << "devices[]" << std::endl;
    for (size_t i = 0; i < v.devices.size(); ++i)
    {
      s << indent << "  devices[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rocon_device_msgs::Device_<ContainerAllocator> >::stream(s, indent + "    ", v.devices[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROCON_DEVICE_MSGS_MESSAGE_GETDEVICELISTRESPONSE_H
