// Generated by gencpp from file rocon_device_msgs/HueArray.msg
// DO NOT EDIT!


#ifndef ROCON_DEVICE_MSGS_MESSAGE_HUEARRAY_H
#define ROCON_DEVICE_MSGS_MESSAGE_HUEARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rocon_device_msgs/Hue.h>

namespace rocon_device_msgs
{
template <class ContainerAllocator>
struct HueArray_
{
  typedef HueArray_<ContainerAllocator> Type;

  HueArray_()
    : hue_list()  {
    }
  HueArray_(const ContainerAllocator& _alloc)
    : hue_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::rocon_device_msgs::Hue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rocon_device_msgs::Hue_<ContainerAllocator> >::other >  _hue_list_type;
  _hue_list_type hue_list;




  typedef boost::shared_ptr< ::rocon_device_msgs::HueArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rocon_device_msgs::HueArray_<ContainerAllocator> const> ConstPtr;

}; // struct HueArray_

typedef ::rocon_device_msgs::HueArray_<std::allocator<void> > HueArray;

typedef boost::shared_ptr< ::rocon_device_msgs::HueArray > HueArrayPtr;
typedef boost::shared_ptr< ::rocon_device_msgs::HueArray const> HueArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rocon_device_msgs::HueArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rocon_device_msgs::HueArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rocon_device_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'rocon_std_msgs': ['/home/turtlebot/ese_team_project/rocon/src/rocon_msgs/rocon_std_msgs/msg', '/home/turtlebot/ese_team_project/rocon/devel/share/rocon_std_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'rocon_device_msgs': ['/home/turtlebot/ese_team_project/rocon/src/rocon_msgs/rocon_device_msgs/msg'], 'rocon_service_pair_msgs': ['/home/turtlebot/ese_team_project/rocon/src/rocon_msgs/rocon_service_pair_msgs/msg'], 'uuid_msgs': ['/opt/ros/indigo/share/uuid_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rocon_device_msgs::HueArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rocon_device_msgs::HueArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rocon_device_msgs::HueArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rocon_device_msgs::HueArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rocon_device_msgs::HueArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rocon_device_msgs::HueArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rocon_device_msgs::HueArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac7d5d01d5d83c6c14384ec4d7c8d7da";
  }

  static const char* value(const ::rocon_device_msgs::HueArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac7d5d01d5d83c6cULL;
  static const uint64_t static_value2 = 0x14384ec4d7c8d7daULL;
};

template<class ContainerAllocator>
struct DataType< ::rocon_device_msgs::HueArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rocon_device_msgs/HueArray";
  }

  static const char* value(const ::rocon_device_msgs::HueArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rocon_device_msgs::HueArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Hue[] hue_list\n\
\n\
================================================================================\n\
MSG: rocon_device_msgs/Hue\n\
int32 light_id\n\
string type\n\
string name\n\
string modelid\n\
string swvesion\n\
HueState state\n\
================================================================================\n\
MSG: rocon_device_msgs/HueState\n\
#pre-define color\n\
string OFF = \"OFF\"\n\
string WHITE = \"WHITE\"\n\
string RED = \"RED\"\n\
string GREEN = \"GREEN\"\n\
string BLUE = \"BLUE\"\n\
string YELLOW = \"YELLOW\"\n\
string ORANGE = \"ORANGE\"\n\
string MAGENTA = \"MAGENTA\"\n\
string VIOLET = \"VIOLET\"\n\
\n\
#light on/off status true:on /false:off\n\
bool on \n\
\n\
#color coordination in HSV color space \n\
#http://en.wikipedia.org/wiki/HSL_and_HSV\n\
uint16 hue #h\n\
uint8 sat #s\n\
uint8 bri #v\n\
\n\
#light valid status - valid:on /invalid:off\n\
bool reachable  \n\
\n\
#for set color with pre-define color\n\
string color\n\
";
  }

  static const char* value(const ::rocon_device_msgs::HueArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rocon_device_msgs::HueArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hue_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HueArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rocon_device_msgs::HueArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rocon_device_msgs::HueArray_<ContainerAllocator>& v)
  {
    s << indent << "hue_list[]" << std::endl;
    for (size_t i = 0; i < v.hue_list.size(); ++i)
    {
      s << indent << "  hue_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rocon_device_msgs::Hue_<ContainerAllocator> >::stream(s, indent + "    ", v.hue_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROCON_DEVICE_MSGS_MESSAGE_HUEARRAY_H
