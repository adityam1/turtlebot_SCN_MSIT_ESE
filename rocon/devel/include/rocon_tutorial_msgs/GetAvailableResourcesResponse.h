// Generated by gencpp from file rocon_tutorial_msgs/GetAvailableResourcesResponse.msg
// DO NOT EDIT!


#ifndef ROCON_TUTORIAL_MSGS_MESSAGE_GETAVAILABLERESOURCESRESPONSE_H
#define ROCON_TUTORIAL_MSGS_MESSAGE_GETAVAILABLERESOURCESRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rocon_tutorial_msgs
{
template <class ContainerAllocator>
struct GetAvailableResourcesResponse_
{
  typedef GetAvailableResourcesResponse_<ContainerAllocator> Type;

  GetAvailableResourcesResponse_()
    : available_resources()
    , preemptible_resources()  {
    }
  GetAvailableResourcesResponse_(const ContainerAllocator& _alloc)
    : available_resources(_alloc)
    , preemptible_resources(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _available_resources_type;
  _available_resources_type available_resources;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _preemptible_resources_type;
  _preemptible_resources_type preemptible_resources;




  typedef boost::shared_ptr< ::rocon_tutorial_msgs::GetAvailableResourcesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rocon_tutorial_msgs::GetAvailableResourcesResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetAvailableResourcesResponse_

typedef ::rocon_tutorial_msgs::GetAvailableResourcesResponse_<std::allocator<void> > GetAvailableResourcesResponse;

typedef boost::shared_ptr< ::rocon_tutorial_msgs::GetAvailableResourcesResponse > GetAvailableResourcesResponsePtr;
typedef boost::shared_ptr< ::rocon_tutorial_msgs::GetAvailableResourcesResponse const> GetAvailableResourcesResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rocon_tutorial_msgs::GetAvailableResourcesResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rocon_tutorial_msgs::GetAvailableResourcesResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rocon_tutorial_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'rocon_service_pair_msgs': ['/home/turtlebot/ese_team_project/rocon/src/rocon_msgs/rocon_service_pair_msgs/msg'], 'uuid_msgs': ['/opt/ros/indigo/share/uuid_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rocon_tutorial_msgs::GetAvailableResourcesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rocon_tutorial_msgs::GetAvailableResourcesResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rocon_tutorial_msgs::GetAvailableResourcesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rocon_tutorial_msgs::GetAvailableResourcesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rocon_tutorial_msgs::GetAvailableResourcesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rocon_tutorial_msgs::GetAvailableResourcesResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rocon_tutorial_msgs::GetAvailableResourcesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4211656ed7da3f4d2a05064e9d6a2241";
  }

  static const char* value(const ::rocon_tutorial_msgs::GetAvailableResourcesResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4211656ed7da3f4dULL;
  static const uint64_t static_value2 = 0x2a05064e9d6a2241ULL;
};

template<class ContainerAllocator>
struct DataType< ::rocon_tutorial_msgs::GetAvailableResourcesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rocon_tutorial_msgs/GetAvailableResourcesResponse";
  }

  static const char* value(const ::rocon_tutorial_msgs::GetAvailableResourcesResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rocon_tutorial_msgs::GetAvailableResourcesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] available_resources\n\
string[] preemptible_resources\n\
\n\
";
  }

  static const char* value(const ::rocon_tutorial_msgs::GetAvailableResourcesResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rocon_tutorial_msgs::GetAvailableResourcesResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.available_resources);
      stream.next(m.preemptible_resources);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetAvailableResourcesResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rocon_tutorial_msgs::GetAvailableResourcesResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rocon_tutorial_msgs::GetAvailableResourcesResponse_<ContainerAllocator>& v)
  {
    s << indent << "available_resources[]" << std::endl;
    for (size_t i = 0; i < v.available_resources.size(); ++i)
    {
      s << indent << "  available_resources[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.available_resources[i]);
    }
    s << indent << "preemptible_resources[]" << std::endl;
    for (size_t i = 0; i < v.preemptible_resources.size(); ++i)
    {
      s << indent << "  preemptible_resources[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.preemptible_resources[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROCON_TUTORIAL_MSGS_MESSAGE_GETAVAILABLERESOURCESRESPONSE_H
