// Generated by gencpp from file rocon_tutorial_msgs/GetAvailableResourcesRequest.msg
// DO NOT EDIT!


#ifndef ROCON_TUTORIAL_MSGS_MESSAGE_GETAVAILABLERESOURCESREQUEST_H
#define ROCON_TUTORIAL_MSGS_MESSAGE_GETAVAILABLERESOURCESREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rocon_tutorial_msgs
{
template <class ContainerAllocator>
struct GetAvailableResourcesRequest_
{
  typedef GetAvailableResourcesRequest_<ContainerAllocator> Type;

  GetAvailableResourcesRequest_()
    : rapp()
    , priority(0)  {
    }
  GetAvailableResourcesRequest_(const ContainerAllocator& _alloc)
    : rapp(_alloc)
    , priority(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _rapp_type;
  _rapp_type rapp;

   typedef int16_t _priority_type;
  _priority_type priority;




  typedef boost::shared_ptr< ::rocon_tutorial_msgs::GetAvailableResourcesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rocon_tutorial_msgs::GetAvailableResourcesRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetAvailableResourcesRequest_

typedef ::rocon_tutorial_msgs::GetAvailableResourcesRequest_<std::allocator<void> > GetAvailableResourcesRequest;

typedef boost::shared_ptr< ::rocon_tutorial_msgs::GetAvailableResourcesRequest > GetAvailableResourcesRequestPtr;
typedef boost::shared_ptr< ::rocon_tutorial_msgs::GetAvailableResourcesRequest const> GetAvailableResourcesRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rocon_tutorial_msgs::GetAvailableResourcesRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rocon_tutorial_msgs::GetAvailableResourcesRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rocon_tutorial_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'rocon_service_pair_msgs': ['/home/turtlebot/ese_team_project/rocon/src/rocon_msgs/rocon_service_pair_msgs/msg'], 'uuid_msgs': ['/opt/ros/indigo/share/uuid_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rocon_tutorial_msgs::GetAvailableResourcesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rocon_tutorial_msgs::GetAvailableResourcesRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rocon_tutorial_msgs::GetAvailableResourcesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rocon_tutorial_msgs::GetAvailableResourcesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rocon_tutorial_msgs::GetAvailableResourcesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rocon_tutorial_msgs::GetAvailableResourcesRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rocon_tutorial_msgs::GetAvailableResourcesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d6acea3bcb7fdb592ecb7ffc748c29b2";
  }

  static const char* value(const ::rocon_tutorial_msgs::GetAvailableResourcesRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd6acea3bcb7fdb59ULL;
  static const uint64_t static_value2 = 0x2ecb7ffc748c29b2ULL;
};

template<class ContainerAllocator>
struct DataType< ::rocon_tutorial_msgs::GetAvailableResourcesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rocon_tutorial_msgs/GetAvailableResourcesRequest";
  }

  static const char* value(const ::rocon_tutorial_msgs::GetAvailableResourcesRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rocon_tutorial_msgs::GetAvailableResourcesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string rapp\n\
int16 priority\n\
";
  }

  static const char* value(const ::rocon_tutorial_msgs::GetAvailableResourcesRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rocon_tutorial_msgs::GetAvailableResourcesRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rapp);
      stream.next(m.priority);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetAvailableResourcesRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rocon_tutorial_msgs::GetAvailableResourcesRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rocon_tutorial_msgs::GetAvailableResourcesRequest_<ContainerAllocator>& v)
  {
    s << indent << "rapp: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.rapp);
    s << indent << "priority: ";
    Printer<int16_t>::stream(s, indent + "  ", v.priority);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROCON_TUTORIAL_MSGS_MESSAGE_GETAVAILABLERESOURCESREQUEST_H
